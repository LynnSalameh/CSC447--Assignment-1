#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define WIDTH 800
#define HEIGHT 800
#define MAX_ITER 1000

int mandelbrot(double x, double y) {
    double real = x;
    double imag = y;
    int iter = 0;

    while (iter < MAX_ITER && sqrt(real * real + imag * imag) < 2) {
        double next_real = real * real - imag * imag + x;
        double next_imag = 2 * real * imag + y;
        real = next_real;
        imag = next_imag;
        iter++;
    }

    return iter;
}

int main(int argc, char** argv) {
    int rank, size, i, j;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        double x_min = -2.0;
        double x_max = 1.0;
        double y_min = -1.5;
        double y_max = 1.5;
        int chunk_size = HEIGHT / size;
        int* result = (int*) malloc(sizeof(int) * WIDTH * HEIGHT);
        int* recv_buf = (int*) malloc(sizeof(int) * WIDTH * chunk_size);

        for (i = 1; i < size; i++) {
            int offset = i * chunk_size * WIDTH;
            MPI_Send(&offset, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }

        for (i = 0; i < chunk_size; i++) {
            for (j = 0; j < WIDTH; j++) {
                double x = x_min + (x_max - x_min) * j / WIDTH;
                double y = y_min + (y_max - y_min) * (i + rank * chunk_size) / HEIGHT;
                result[i * WIDTH + j] = mandelbrot(x, y);
            }
        }

        for (i = 1; i < size; i++) {
            MPI_Recv(recv_buf, WIDTH * chunk_size, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            int offset = i * chunk_size * WIDTH;
            for (j = 0; j < chunk_size; j++) {
                for (int k = 0; k < WIDTH; k++) {
                    result[(j + offset) * WIDTH + k] = recv_buf[j * WIDTH + k];
                }
            }
        }

        FILE* fp;
        fp = fopen("mandelbrot.pgm", "w");
        fprintf(fp, "P2\n%d %d\n%d\n", WIDTH, HEIGHT, MAX_ITER);
        for (i = 0; i < HEIGHT; i++) {
            for (j = 0; j < WIDTH; j++) {
                fprintf(fp, "%d ", result[i * WIDTH + j]);
            }
            fprintf(fp, "\n");
        }
        fclose(fp);

        free(result);
        free(recv_buf);
    } else {
        int chunk_size = HEIGHT / size;
        int* buf = (int*) malloc
                int offset;
        MPI_Recv(&offset, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        int* result = (int*) malloc(sizeof(int) * WIDTH * chunk_size);

        for (i = 0; i < chunk_size; i++) {
            for (j = 0; j < WIDTH; j++) {
                double x = -2.0 + (1.0 - -2.0) * j / WIDTH;
                double y = -1.5 + (1.5 - -1.5) * (i + offset / WIDTH) / HEIGHT;
                result[i * WIDTH + j] = mandelbrot(x, y);
            }
        }

        MPI_Send(result, WIDTH * chunk_size, MPI_INT, 0, 0, MPI_COMM_WORLD);

        free(result);
    }

    MPI_Finalize();
    return 0;
}

